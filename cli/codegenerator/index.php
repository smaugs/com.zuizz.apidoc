<?php

// STDIN für den notfall initialisieren wenn es nicht da sein sollte
if (!defined("STDIN")) {
    define ("STDIN", fopen('php://stdin', 'r'));
}

// Init
$methods = array("GET", "HEAD", "PUT", "DELETE", "POST", "OPTIONS", "TRACE", "CONNECT");
$types = array("numeric", "string", "int", "float", "email", "regularexpression", "url", "unsafe", "ip adress", "Boolean");

system("clear");
$GLOBALS['zeilenbreite'] = exec('/usr/bin/env tput cols') -13;

// docs raussuchen
$modules = ORM::for_table('rst_apidoc')->find_array();

// bereits existierende rausnehmen
foreach ($modules as $key => $module) {
    // existenz prüfen
    $feature_array = explode(".", $module['request']);
    $feature = "{$feature_array[0]}.{$feature_array[1]}.{$feature_array[2]}";
    $view = implode("/", array_slice($feature_array, 3));
    $themethod = strtolower($methods[$module['method']]);
    $directory = ZU_DIR_FEATURE . $feature . "/rest/" . $view . "/" . $themethod;
    $file = $directory . "/index.php";

    if(is_file($file) || !is_dir(ZU_DIR_FEATURE . $feature)){
        unset($modules[$key]);
    }

}


draw_modules($modules, $methods);
echo "Please select Module by #, type help for help \n\n";
$continue = false;
while ($continue == false) {

    $userinput = trim(fread(STDIN, 80)); // Read up to 80 characters or a newline
    system("clear");
    draw_modules($modules, $methods);


    switch ($userinput) {
        case "help":
            echo "Type q for quit or a number to select and continue\n\n";
            break;

        case "q":
            system("clear");
            echo "session terminated by user\n";
            die();

            break;
        default:
            if (isset($modules[$userinput])) {
                $continue = true;
                $selection = $userinput;
            } else {
                echo "Invalid entry, please repeat\n\n";
            }
            break;
    }
}
system("clear");
echo "Code for module will be generated\n";
draw_modules(array($modules[$selection]), $methods);
echo "\n";

$feature_array = explode(".", $modules[$selection]['request']);
$feature = "{$feature_array[0]}.{$feature_array[1]}.{$feature_array[2]}";
$view = implode("/", array_slice($feature_array, 3));

$themethod = strtolower($methods[$modules[$selection]['method']]);
$directory = ZU_DIR_FEATURE . $feature . "/rest/" . $view . "/" . $themethod;

// Prüfe ob das Verzeichniss existiert, wenn ja exit

if (!is_dir($directory)) {
    // Verzeichniss anlegen
    mkdir($directory, 0777, true);
}
$file = $directory . "/index.php";

// nur fortfahren wenn das file noch nicht erstellt wurde
if (!is_file($file)) {
    // string aufbauen
    $sourcecode = "<?php \n";


    // description
    $sourcecode .= "/* \n";
    $sourcecode .= " * " . $modules[$selection]['title'] . "\n";
    foreach (preg_split("/(\r?\n)/", $modules[$selection]['description']) as $line) {
        // do stuff with $line
        $sourcecode .= " * " . $line . "\n";
    }
    $sourcecode .= " *\n";
    $sourcecode .= " *\n";
    $sourcecode .= " * @author \n";
    $sourcecode .= " * @package " . $feature . "\n";
    $sourcecode .= " * @subpackage \n";
    $sourcecode .= " *\n";
    $sourcecode .= " *\n";
    $sourcecode .= " *\n";

    // Permissions
    $sourcecode .= " * Permissions / Roles \n";
    foreach (ORM::for_table('rst_role')->where('apidoc_id',$modules[$selection]['id'])->find_array() as $tmp) {
        $sourcecode .= " * " . $tmp['role'] . " => " . $tmp['description'] . "\n";

        // Noch nicht existierende Rollen eintragen
        $count = ZU::ORMselectCount('org_functional_role',array('title'=>$tmp['role']));
        if ($count == 0) {
            echo $tmp['role'];
            $role = ORM::for_table('org_functional_role')->create();
            $role->title = $tmp['role'];
            $role->description = "doc2code autogenerated role";
            $role->c_date = ZU_NOW;
            $role->save();
        }

    }
    $sourcecode .= " *\n";
    $sourcecode .= " *\n";
    $sourcecode .= " *\n";

    // states
    $sourcecode .= " * States \n";
    $sourcecode .= " *\n";
    foreach (ORM::for_table('rst_states')->where('apidoc_id',$modules[$selection]['id'])->find_array() as $tmp) {
        $sourcecode .= " * State " . $tmp['code'] . "  => " . $tmp['message'] . "\n";
        foreach (preg_split("/(\r?\n)/", $tmp['description']) as $line) {
            $sourcecode .= " * " . $line . "\n";
        }
        $sourcecode .= " *\n";
    }
    $sourcecode .= " *\n";
    $sourcecode .= " *\n";
    // Variablen
    $sourcecode .= " * Available variables \n";
    $sourcecode .= " *\n";
    foreach (ORM::for_table('rst_parameter')->where('apidoc_id',$modules[$selection]['id'])->find_array() as $tmp) {
        $sourcecode .= " * " . $tmp['description'] . "\n";
        $sourcecode .= " * varname:" . $tmp['name'] . " (" . $types[$tmp['type']] . "), always available:" . $tmp['required'] . "\n";
        $sourcecode .= " *\n";
    }
    $sourcecode .= " *\n";
    $sourcecode .= " *\n";


    $sourcecode .= " */\n\n";

    $sourcecode .= "// your code somewhere here \n\n";
    foreach (ORM::for_table('rst_parameter')->where('apidoc_id',$modules[$selection]['id'])->find_array() as $tmp) {
        $sourcecode .= "\$this->values['" . $tmp['name'] . "'];\n";
    }
    $sourcecode .= "\n\n";

    $sourcecode .= "\$this->data['message'] = \"dont forget the message\";\n";

    $sourcecode .= "\n\n";


    // Mimetypes
    foreach (ORM::for_table('rst_mimetype')->where('apidoc_id',$modules[$selection]['id'])->find_array() as $tmp) {
        $sourcecode .= "/* \n * Mimetype " . $tmp['name'] . " \n";
        $sourcecode .= " * Returns:\n";
        foreach (preg_split("/(\r?\n)/", $tmp['response']) as $line) {
            // do stuff with $line
            $sourcecode .= " * " . $line . "\n";
        }
        $sourcecode .= "*/\n\n";
    }


    foreach (ORM::for_table('rst_mimetype')->where('apidoc_id',$modules[$selection]['id'])->find_array() as $tmp) {
        if ($tmp['is_default'] == 1) {
            $sourcecode .= "// set default mimetype\n";
            $sourcecode .= "if (!\$this->mimetype) {\n";
            $sourcecode .= "    \$this->mimetype = '" . $tmp['name'] . "'; \n";
            $sourcecode .= "}\n\n";
            break;
        }
    }
    $sourcecode .= "switch (\$this->mimetype) {\n";
    $sourcecode .= "   case \"json\":\n";
    $sourcecode .= "     header('Content-type: application/json');\n";
    $sourcecode .= "     \$this->contentbuffer = json_encode(\$this->data);\n";
    $sourcecode .= "   break;\n";
    $sourcecode .= "   case \"xml\":\n";
    $sourcecode .= "     header('Content-type: application/xml');\n";
    $sourcecode .= "     ZU::load_class('lalit.array2xml', 'xml', true);\n";
    $sourcecode .= "     \$xml = Array2XML::createXML('auth', \$this->data);\n";
    $sourcecode .= "     \$this->contentbuffer = \$xml->saveXML();\n";
    $sourcecode .= "   break;\n";
    $sourcecode .= "}";


    //

    // file schreiben
    file_put_contents($file, $sourcecode);
    chmod($file, 0777);
} else {
    echo "File all ready exist\n\n";
    die();
}


function draw_modules($modules, $methods)
{

    line();
    echo "| ";
    echo   str_pad("#", floor($GLOBALS['zeilenbreite'] * 0.07), " ") . " | ";
    echo   str_pad("Title", floor($GLOBALS['zeilenbreite'] * 0.4), " ") . " | ";
    echo   str_pad("Request", floor($GLOBALS['zeilenbreite'] * 0.45), " ") . " | ";
    echo   str_pad("Method", floor($GLOBALS['zeilenbreite'] * 0.08), " ") . " | \n";

    line();


    foreach ($modules as $index => $mod) {
        echo "| ";
        echo   str_pad($index, floor($GLOBALS['zeilenbreite'] * 0.07), " ") . " | ";
        echo   str_pad($mod['title'], floor($GLOBALS['zeilenbreite'] * 0.4), " ") . " | ";
        echo   str_pad($mod['request'], floor($GLOBALS['zeilenbreite'] * 0.45), " ") . " | ";
        echo   str_pad($methods[$mod['method']], floor($GLOBALS['zeilenbreite'] * 0.08), " ") . " | \n";
    }
    line();


}

function line()
{
    echo "| ";
    echo   str_pad("", floor($GLOBALS['zeilenbreite'] * 0.07), "-") . " | ";
    echo   str_pad("", floor($GLOBALS['zeilenbreite'] * 0.4), "-") . " | ";
    echo   str_pad("", floor($GLOBALS['zeilenbreite'] * 0.45), "-") . " | ";
    echo   str_pad("", floor($GLOBALS['zeilenbreite'] * 0.08), "-") . " | \n";

}
